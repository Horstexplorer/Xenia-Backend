/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.MembersRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Members extends TableImpl<MembersRecord> {

    private static final long serialVersionUID = 1151185890;

    /**
     * The reference instance of <code>public.members</code>
     */
    public static final Members MEMBERS = new Members();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MembersRecord> getRecordType() {
        return MembersRecord.class;
    }

    /**
     * The column <code>public.members.guild_id</code>.
     */
    public final TableField<MembersRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.members.user_id</code>.
     */
    public final TableField<MembersRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.members.creation_timestamp</code>.
     */
    public final TableField<MembersRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.members</code> table reference
     */
    public Members() {
        this(DSL.name("members"), null);
    }

    /**
     * Create an aliased <code>public.members</code> table reference
     */
    public Members(String alias) {
        this(DSL.name(alias), MEMBERS);
    }

    /**
     * Create an aliased <code>public.members</code> table reference
     */
    public Members(Name alias) {
        this(alias, MEMBERS);
    }

    private Members(Name alias, Table<MembersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Members(Name alias, Table<MembersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Members(Table<O> child, ForeignKey<O, MembersRecord> key) {
        super(child, key, MEMBERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<MembersRecord> getPrimaryKey() {
        return Keys.MEMBERS_GUILD_ID_USER_ID;
    }

    @Override
    public List<UniqueKey<MembersRecord>> getKeys() {
        return Arrays.<UniqueKey<MembersRecord>>asList(Keys.MEMBERS_GUILD_ID_USER_ID, Keys.MEMBERS_GUILD_ID_USER_ID_UNIQUE);
    }

    @Override
    public List<ForeignKey<MembersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MembersRecord, ?>>asList(Keys.MEMBERS__MEMBERS_GUILD_ID_FKEY, Keys.MEMBERS__MEMBERS_USER_ID_FKEY);
    }

    public Guilds guilds() {
        return new Guilds(this, Keys.MEMBERS__MEMBERS_GUILD_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.MEMBERS__MEMBERS_USER_ID_FKEY);
    }

    @Override
    public Members as(String alias) {
        return new Members(DSL.name(alias), this);
    }

    @Override
    public Members as(Name alias) {
        return new Members(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Members rename(String name) {
        return new Members(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Members rename(Name name) {
        return new Members(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
