/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.UsersOauthRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersOauth extends TableImpl<UsersOauthRecord> {

    private static final long serialVersionUID = -403766079;

    /**
     * The reference instance of <code>public.users_oauth</code>
     */
    public static final UsersOauth USERS_OAUTH = new UsersOauth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersOauthRecord> getRecordType() {
        return UsersOauthRecord.class;
    }

    /**
     * The column <code>public.users_oauth.entry_id</code>.
     */
    public final TableField<UsersOauthRecord, Integer> ENTRY_ID = createField(DSL.name("entry_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('users_oauth_entry_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.users_oauth.user_id</code>.
     */
    public final TableField<UsersOauthRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.users_oauth.access_token</code>.
     */
    public final TableField<UsersOauthRecord, String> ACCESS_TOKEN = createField(DSL.name("access_token"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.users_oauth.refresh_token</code>.
     */
    public final TableField<UsersOauthRecord, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.users_oauth.token_type</code>.
     */
    public final TableField<UsersOauthRecord, String> TOKEN_TYPE = createField(DSL.name("token_type"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * Create a <code>public.users_oauth</code> table reference
     */
    public UsersOauth() {
        this(DSL.name("users_oauth"), null);
    }

    /**
     * Create an aliased <code>public.users_oauth</code> table reference
     */
    public UsersOauth(String alias) {
        this(DSL.name(alias), USERS_OAUTH);
    }

    /**
     * Create an aliased <code>public.users_oauth</code> table reference
     */
    public UsersOauth(Name alias) {
        this(alias, USERS_OAUTH);
    }

    private UsersOauth(Name alias, Table<UsersOauthRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersOauth(Name alias, Table<UsersOauthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UsersOauth(Table<O> child, ForeignKey<O, UsersOauthRecord> key) {
        super(child, key, USERS_OAUTH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UsersOauthRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERS_OAUTH;
    }

    @Override
    public UniqueKey<UsersOauthRecord> getPrimaryKey() {
        return Keys.USERS_OAUTH_ENTRY_ID;
    }

    @Override
    public List<UniqueKey<UsersOauthRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersOauthRecord>>asList(Keys.USERS_OAUTH_ENTRY_ID);
    }

    @Override
    public List<ForeignKey<UsersOauthRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersOauthRecord, ?>>asList(Keys.USERS_OAUTH__USERS_OAUTH_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USERS_OAUTH__USERS_OAUTH_USER_ID_FKEY);
    }

    @Override
    public UsersOauth as(String alias) {
        return new UsersOauth(DSL.name(alias), this);
    }

    @Override
    public UsersOauth as(Name alias) {
        return new UsersOauth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersOauth rename(String name) {
        return new UsersOauth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersOauth rename(Name name) {
        return new UsersOauth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
