/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables.records;


import de.netbeacon.xenia.joop.tables.UsersOauth;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersOauthRecord extends UpdatableRecordImpl<UsersOauthRecord> implements Record5<Integer, Long, String, String, String> {

    private static final long serialVersionUID = -596416155;

    /**
     * Setter for <code>public.users_oauth.entry_id</code>.
     */
    public UsersOauthRecord setEntryId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.users_oauth.entry_id</code>.
     */
    public Integer getEntryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.users_oauth.user_id</code>.
     */
    public UsersOauthRecord setUserId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.users_oauth.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.users_oauth.access_token</code>.
     */
    public UsersOauthRecord setAccessToken(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.users_oauth.access_token</code>.
     */
    public String getAccessToken() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.users_oauth.refresh_token</code>.
     */
    public UsersOauthRecord setRefreshToken(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.users_oauth.refresh_token</code>.
     */
    public String getRefreshToken() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.users_oauth.token_type</code>.
     */
    public UsersOauthRecord setTokenType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.users_oauth.token_type</code>.
     */
    public String getTokenType() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Long, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return UsersOauth.USERS_OAUTH.ENTRY_ID;
    }

    @Override
    public Field<Long> field2() {
        return UsersOauth.USERS_OAUTH.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return UsersOauth.USERS_OAUTH.ACCESS_TOKEN;
    }

    @Override
    public Field<String> field4() {
        return UsersOauth.USERS_OAUTH.REFRESH_TOKEN;
    }

    @Override
    public Field<String> field5() {
        return UsersOauth.USERS_OAUTH.TOKEN_TYPE;
    }

    @Override
    public Integer component1() {
        return getEntryId();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getAccessToken();
    }

    @Override
    public String component4() {
        return getRefreshToken();
    }

    @Override
    public String component5() {
        return getTokenType();
    }

    @Override
    public Integer value1() {
        return getEntryId();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getAccessToken();
    }

    @Override
    public String value4() {
        return getRefreshToken();
    }

    @Override
    public String value5() {
        return getTokenType();
    }

    @Override
    public UsersOauthRecord value1(Integer value) {
        setEntryId(value);
        return this;
    }

    @Override
    public UsersOauthRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UsersOauthRecord value3(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public UsersOauthRecord value4(String value) {
        setRefreshToken(value);
        return this;
    }

    @Override
    public UsersOauthRecord value5(String value) {
        setTokenType(value);
        return this;
    }

    @Override
    public UsersOauthRecord values(Integer value1, Long value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersOauthRecord
     */
    public UsersOauthRecord() {
        super(UsersOauth.USERS_OAUTH);
    }

    /**
     * Create a detached, initialised UsersOauthRecord
     */
    public UsersOauthRecord(Integer entryId, Long userId, String accessToken, String refreshToken, String tokenType) {
        super(UsersOauth.USERS_OAUTH);

        set(0, entryId);
        set(1, userId);
        set(2, accessToken);
        set(3, refreshToken);
        set(4, tokenType);
    }
}
