/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables.records;


import de.netbeacon.xenia.joop.tables.UsersAuth;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersAuthRecord extends UpdatableRecordImpl<UsersAuthRecord> implements Record4<Long, LocalDateTime, LocalDateTime, String> {

    private static final long serialVersionUID = 1744856353;

    /**
     * Setter for <code>public.users_auth.user_id</code>.
     */
    public UsersAuthRecord setUserId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.users_auth.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.users_auth.creation_timestamp</code>.
     */
    public UsersAuthRecord setCreationTimestamp(LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.users_auth.creation_timestamp</code>.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.users_auth.valid_until_timestamp</code>.
     */
    public UsersAuthRecord setValidUntilTimestamp(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.users_auth.valid_until_timestamp</code>.
     */
    public LocalDateTime getValidUntilTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.users_auth.api_auth_hash</code>.
     */
    public UsersAuthRecord setApiAuthHash(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.users_auth.api_auth_hash</code>.
     */
    public String getApiAuthHash() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Long, LocalDateTime, LocalDateTime, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UsersAuth.USERS_AUTH.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return UsersAuth.USERS_AUTH.CREATION_TIMESTAMP;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return UsersAuth.USERS_AUTH.VALID_UNTIL_TIMESTAMP;
    }

    @Override
    public Field<String> field4() {
        return UsersAuth.USERS_AUTH.API_AUTH_HASH;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreationTimestamp();
    }

    @Override
    public LocalDateTime component3() {
        return getValidUntilTimestamp();
    }

    @Override
    public String component4() {
        return getApiAuthHash();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreationTimestamp();
    }

    @Override
    public LocalDateTime value3() {
        return getValidUntilTimestamp();
    }

    @Override
    public String value4() {
        return getApiAuthHash();
    }

    @Override
    public UsersAuthRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UsersAuthRecord value2(LocalDateTime value) {
        setCreationTimestamp(value);
        return this;
    }

    @Override
    public UsersAuthRecord value3(LocalDateTime value) {
        setValidUntilTimestamp(value);
        return this;
    }

    @Override
    public UsersAuthRecord value4(String value) {
        setApiAuthHash(value);
        return this;
    }

    @Override
    public UsersAuthRecord values(Long value1, LocalDateTime value2, LocalDateTime value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersAuthRecord
     */
    public UsersAuthRecord() {
        super(UsersAuth.USERS_AUTH);
    }

    /**
     * Create a detached, initialised UsersAuthRecord
     */
    public UsersAuthRecord(Long userId, LocalDateTime creationTimestamp, LocalDateTime validUntilTimestamp, String apiAuthHash) {
        super(UsersAuth.USERS_AUTH);

        set(0, userId);
        set(1, creationTimestamp);
        set(2, validUntilTimestamp);
        set(3, apiAuthHash);
    }
}
