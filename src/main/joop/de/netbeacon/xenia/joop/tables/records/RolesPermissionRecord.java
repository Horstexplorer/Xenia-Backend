/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables.records;


import de.netbeacon.xenia.joop.tables.RolesPermission;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolesPermissionRecord extends UpdatableRecordImpl<RolesPermissionRecord> implements Record3<Long, Long, Boolean> {

    private static final long serialVersionUID = -1117081500;

    /**
     * Setter for <code>public.roles_permission.role_id</code>.
     */
    public RolesPermissionRecord setRoleId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.roles_permission.role_id</code>.
     */
    public Long getRoleId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.roles_permission.permission_id</code>.
     */
    public RolesPermissionRecord setPermissionId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.roles_permission.permission_id</code>.
     */
    public Long getPermissionId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.roles_permission.permission_granted</code>.
     */
    public RolesPermissionRecord setPermissionGranted(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.roles_permission.permission_granted</code>.
     */
    public Boolean getPermissionGranted() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return RolesPermission.ROLES_PERMISSION.ROLE_ID;
    }

    @Override
    public Field<Long> field2() {
        return RolesPermission.ROLES_PERMISSION.PERMISSION_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return RolesPermission.ROLES_PERMISSION.PERMISSION_GRANTED;
    }

    @Override
    public Long component1() {
        return getRoleId();
    }

    @Override
    public Long component2() {
        return getPermissionId();
    }

    @Override
    public Boolean component3() {
        return getPermissionGranted();
    }

    @Override
    public Long value1() {
        return getRoleId();
    }

    @Override
    public Long value2() {
        return getPermissionId();
    }

    @Override
    public Boolean value3() {
        return getPermissionGranted();
    }

    @Override
    public RolesPermissionRecord value1(Long value) {
        setRoleId(value);
        return this;
    }

    @Override
    public RolesPermissionRecord value2(Long value) {
        setPermissionId(value);
        return this;
    }

    @Override
    public RolesPermissionRecord value3(Boolean value) {
        setPermissionGranted(value);
        return this;
    }

    @Override
    public RolesPermissionRecord values(Long value1, Long value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RolesPermissionRecord
     */
    public RolesPermissionRecord() {
        super(RolesPermission.ROLES_PERMISSION);
    }

    /**
     * Create a detached, initialised RolesPermissionRecord
     */
    public RolesPermissionRecord(Long roleId, Long permissionId, Boolean permissionGranted) {
        super(RolesPermission.ROLES_PERMISSION);

        set(0, roleId);
        set(1, permissionId);
        set(2, permissionGranted);
    }
}
