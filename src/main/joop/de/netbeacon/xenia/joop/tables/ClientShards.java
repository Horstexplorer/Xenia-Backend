/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.ClientShardsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientShards extends TableImpl<ClientShardsRecord> {

    private static final long serialVersionUID = -1334643158;

    /**
     * The reference instance of <code>public.client_shards</code>
     */
    public static final ClientShards CLIENT_SHARDS = new ClientShards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientShardsRecord> getRecordType() {
        return ClientShardsRecord.class;
    }

    /**
     * The column <code>public.client_shards.shard_id</code>.
     */
    public final TableField<ClientShardsRecord, Integer> SHARD_ID = createField(DSL.name("shard_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.client_shards.bot_id</code>.
     */
    public final TableField<ClientShardsRecord, Long> BOT_ID = createField(DSL.name("bot_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.client_shards</code> table reference
     */
    public ClientShards() {
        this(DSL.name("client_shards"), null);
    }

    /**
     * Create an aliased <code>public.client_shards</code> table reference
     */
    public ClientShards(String alias) {
        this(DSL.name(alias), CLIENT_SHARDS);
    }

    /**
     * Create an aliased <code>public.client_shards</code> table reference
     */
    public ClientShards(Name alias) {
        this(alias, CLIENT_SHARDS);
    }

    private ClientShards(Name alias, Table<ClientShardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientShards(Name alias, Table<ClientShardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ClientShards(Table<O> child, ForeignKey<O, ClientShardsRecord> key) {
        super(child, key, CLIENT_SHARDS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ClientShardsRecord> getPrimaryKey() {
        return Keys.CLIENT_BOT_SHARDS_PKEY;
    }

    @Override
    public List<UniqueKey<ClientShardsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientShardsRecord>>asList(Keys.CLIENT_BOT_SHARDS_PKEY);
    }

    @Override
    public List<ForeignKey<ClientShardsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientShardsRecord, ?>>asList(Keys.CLIENT_SHARDS__CLIENT_BOT_SHARDS_CLIENT_BOT_ID_FKEY);
    }

    public ClientSettings clientSettings() {
        return new ClientSettings(this, Keys.CLIENT_SHARDS__CLIENT_BOT_SHARDS_CLIENT_BOT_ID_FKEY);
    }

    @Override
    public ClientShards as(String alias) {
        return new ClientShards(DSL.name(alias), this);
    }

    @Override
    public ClientShards as(Name alias) {
        return new ClientShards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientShards rename(String name) {
        return new ClientShards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientShards rename(Name name) {
        return new ClientShards(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
