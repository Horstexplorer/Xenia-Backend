/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.LicensesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Licenses extends TableImpl<LicensesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.licenses</code>
     */
    public static final Licenses LICENSES = new Licenses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LicensesRecord> getRecordType() {
        return LicensesRecord.class;
    }

    /**
     * The column <code>public.licenses.license_id</code>.
     */
    public final TableField<LicensesRecord, Integer> LICENSE_ID = createField(DSL.name("license_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.licenses.license_key</code>.
     */
    public final TableField<LicensesRecord, String> LICENSE_KEY = createField(DSL.name("license_key"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.licenses.license_type</code>.
     */
    public final TableField<LicensesRecord, Integer> LICENSE_TYPE = createField(DSL.name("license_type"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.licenses.license_claimed</code>.
     */
    public final TableField<LicensesRecord, Boolean> LICENSE_CLAIMED = createField(DSL.name("license_claimed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.licenses.license_duration_days</code>.
     */
    public final TableField<LicensesRecord, Integer> LICENSE_DURATION_DAYS = createField(DSL.name("license_duration_days"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("30", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.licenses.license_activation_timestamp</code>.
     */
    public final TableField<LicensesRecord, LocalDateTime> LICENSE_ACTIVATION_TIMESTAMP = createField(DSL.name("license_activation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Licenses(Name alias, Table<LicensesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Licenses(Name alias, Table<LicensesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.licenses</code> table reference
     */
    public Licenses(String alias) {
        this(DSL.name(alias), LICENSES);
    }

    /**
     * Create an aliased <code>public.licenses</code> table reference
     */
    public Licenses(Name alias) {
        this(alias, LICENSES);
    }

    /**
     * Create a <code>public.licenses</code> table reference
     */
    public Licenses() {
        this(DSL.name("licenses"), null);
    }

    public <O extends Record> Licenses(Table<O> child, ForeignKey<O, LicensesRecord> key) {
        super(child, key, LICENSES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LicensesRecord, Integer> getIdentity() {
        return (Identity<LicensesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LicensesRecord> getPrimaryKey() {
        return Keys.LICENSES_LICENSE_ID;
    }

    @Override
    public List<UniqueKey<LicensesRecord>> getKeys() {
        return Arrays.<UniqueKey<LicensesRecord>>asList(Keys.LICENSES_LICENSE_ID, Keys.LICENSES_LICENSE_KEY);
    }

    @Override
    public List<ForeignKey<LicensesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LicensesRecord, ?>>asList(Keys.LICENSES__LICENSES_LICENSE_TYPE_FKEY);
    }

    public LicenseTypes licenseTypes() {
        return new LicenseTypes(this, Keys.LICENSES__LICENSES_LICENSE_TYPE_FKEY);
    }

    @Override
    public Licenses as(String alias) {
        return new Licenses(DSL.name(alias), this);
    }

    @Override
    public Licenses as(Name alias) {
        return new Licenses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Licenses rename(String name) {
        return new Licenses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Licenses rename(Name name) {
        return new Licenses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, Boolean, Integer, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
