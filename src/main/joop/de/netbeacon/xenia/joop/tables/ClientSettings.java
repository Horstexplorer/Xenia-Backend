/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.ClientSettingsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientSettings extends TableImpl<ClientSettingsRecord> {

    private static final long serialVersionUID = 460976122;

    /**
     * The reference instance of <code>public.client_settings</code>
     */
    public static final ClientSettings CLIENT_SETTINGS = new ClientSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientSettingsRecord> getRecordType() {
        return ClientSettingsRecord.class;
    }

    /**
     * The column <code>public.client_settings.client_id</code>.
     */
    public final TableField<ClientSettingsRecord, Integer> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('client_bot_settings_bot_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.client_settings.client_name</code>.
     */
    public final TableField<ClientSettingsRecord, String> CLIENT_NAME = createField(DSL.name("client_name"), org.jooq.impl.SQLDataType.CHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.client_settings.client_description</code>.
     */
    public final TableField<ClientSettingsRecord, String> CLIENT_DESCRIPTION = createField(DSL.name("client_description"), org.jooq.impl.SQLDataType.CHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.client_settings.client_discord_token</code>.
     */
    public final TableField<ClientSettingsRecord, String> CLIENT_DISCORD_TOKEN = createField(DSL.name("client_discord_token"), org.jooq.impl.SQLDataType.CHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.client_settings.client_type</code>.
     */
    public final TableField<ClientSettingsRecord, String> CLIENT_TYPE = createField(DSL.name("client_type"), org.jooq.impl.SQLDataType.CHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.field("'unknown'::bpchar", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * Create a <code>public.client_settings</code> table reference
     */
    public ClientSettings() {
        this(DSL.name("client_settings"), null);
    }

    /**
     * Create an aliased <code>public.client_settings</code> table reference
     */
    public ClientSettings(String alias) {
        this(DSL.name(alias), CLIENT_SETTINGS);
    }

    /**
     * Create an aliased <code>public.client_settings</code> table reference
     */
    public ClientSettings(Name alias) {
        this(alias, CLIENT_SETTINGS);
    }

    private ClientSettings(Name alias, Table<ClientSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientSettings(Name alias, Table<ClientSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ClientSettings(Table<O> child, ForeignKey<O, ClientSettingsRecord> key) {
        super(child, key, CLIENT_SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ClientSettingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENT_SETTINGS;
    }

    @Override
    public UniqueKey<ClientSettingsRecord> getPrimaryKey() {
        return Keys.CLIENT_BOT_SETTINGS_BOT_ID;
    }

    @Override
    public List<UniqueKey<ClientSettingsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientSettingsRecord>>asList(Keys.CLIENT_BOT_SETTINGS_BOT_ID);
    }

    @Override
    public ClientSettings as(String alias) {
        return new ClientSettings(DSL.name(alias), this);
    }

    @Override
    public ClientSettings as(Name alias) {
        return new ClientSettings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSettings rename(String name) {
        return new ClientSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientSettings rename(Name name) {
        return new ClientSettings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
