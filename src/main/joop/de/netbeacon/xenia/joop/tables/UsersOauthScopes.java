/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.UsersOauthScopesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersOauthScopes extends TableImpl<UsersOauthScopesRecord> {

    private static final long serialVersionUID = -1296745100;

    /**
     * The reference instance of <code>public.users_oauth_scopes</code>
     */
    public static final UsersOauthScopes USERS_OAUTH_SCOPES = new UsersOauthScopes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersOauthScopesRecord> getRecordType() {
        return UsersOauthScopesRecord.class;
    }

    /**
     * The column <code>public.users_oauth_scopes.entry_id</code>.
     */
    public final TableField<UsersOauthScopesRecord, Long> ENTRY_ID = createField(DSL.name("entry_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_bot</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_BOT = createField(DSL.name("scope_bot"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_connections</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_CONNECTIONS = createField(DSL.name("scope_connections"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_email</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_EMAIL = createField(DSL.name("scope_email"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_identify</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_IDENTIFY = createField(DSL.name("scope_identify"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_guilds</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_GUILDS = createField(DSL.name("scope_guilds"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_guilds_join</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_GUILDS_JOIN = createField(DSL.name("scope_guilds_join"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_gdm_join</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_GDM_JOIN = createField(DSL.name("scope_gdm_join"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_messages_read</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_MESSAGES_READ = createField(DSL.name("scope_messages_read"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_rpc</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_RPC = createField(DSL.name("scope_rpc"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_rpc_api</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_RPC_API = createField(DSL.name("scope_rpc_api"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_rpc_notifications_read</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_RPC_NOTIFICATIONS_READ = createField(DSL.name("scope_rpc_notifications_read"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_webhook_incoming</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_WEBHOOK_INCOMING = createField(DSL.name("scope_webhook_incoming"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_applications_builds_upload</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_APPLICATIONS_BUILDS_UPLOAD = createField(DSL.name("scope_applications_builds_upload"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_applications_builds_read</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_APPLICATIONS_BUILDS_READ = createField(DSL.name("scope_applications_builds_read"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_applications_store_update</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_APPLICATIONS_STORE_UPDATE = createField(DSL.name("scope_applications_store_update"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_applications_entitlements</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_APPLICATIONS_ENTITLEMENTS = createField(DSL.name("scope_applications_entitlements"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_relationships_read</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_RELATIONSHIPS_READ = createField(DSL.name("scope_relationships_read"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_activities_read</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_ACTIVITIES_READ = createField(DSL.name("scope_activities_read"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users_oauth_scopes.scope_activities_write</code>.
     */
    public final TableField<UsersOauthScopesRecord, Boolean> SCOPE_ACTIVITIES_WRITE = createField(DSL.name("scope_activities_write"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.users_oauth_scopes</code> table reference
     */
    public UsersOauthScopes() {
        this(DSL.name("users_oauth_scopes"), null);
    }

    /**
     * Create an aliased <code>public.users_oauth_scopes</code> table reference
     */
    public UsersOauthScopes(String alias) {
        this(DSL.name(alias), USERS_OAUTH_SCOPES);
    }

    /**
     * Create an aliased <code>public.users_oauth_scopes</code> table reference
     */
    public UsersOauthScopes(Name alias) {
        this(alias, USERS_OAUTH_SCOPES);
    }

    private UsersOauthScopes(Name alias, Table<UsersOauthScopesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersOauthScopes(Name alias, Table<UsersOauthScopesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UsersOauthScopes(Table<O> child, ForeignKey<O, UsersOauthScopesRecord> key) {
        super(child, key, USERS_OAUTH_SCOPES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersOauthScopesRecord> getPrimaryKey() {
        return Keys.USERS_OAUTH_SCOPES_ENTRY_ID;
    }

    @Override
    public List<UniqueKey<UsersOauthScopesRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersOauthScopesRecord>>asList(Keys.USERS_OAUTH_SCOPES_ENTRY_ID);
    }

    @Override
    public List<ForeignKey<UsersOauthScopesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersOauthScopesRecord, ?>>asList(Keys.USERS_OAUTH_SCOPES__USERS_OAUTH_SCOPES_ENTRY_ID_FKEY);
    }

    public UsersOauth usersOauth() {
        return new UsersOauth(this, Keys.USERS_OAUTH_SCOPES__USERS_OAUTH_SCOPES_ENTRY_ID_FKEY);
    }

    @Override
    public UsersOauthScopes as(String alias) {
        return new UsersOauthScopes(DSL.name(alias), this);
    }

    @Override
    public UsersOauthScopes as(Name alias) {
        return new UsersOauthScopes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersOauthScopes rename(String name) {
        return new UsersOauthScopes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersOauthScopes rename(Name name) {
        return new UsersOauthScopes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<Long, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row20) super.fieldsRow();
    }
}
