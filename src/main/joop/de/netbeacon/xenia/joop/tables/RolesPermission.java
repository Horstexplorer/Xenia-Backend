/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.RolesPermissionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolesPermission extends TableImpl<RolesPermissionRecord> {

    private static final long serialVersionUID = -834365812;

    /**
     * The reference instance of <code>public.roles_permission</code>
     */
    public static final RolesPermission ROLES_PERMISSION = new RolesPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolesPermissionRecord> getRecordType() {
        return RolesPermissionRecord.class;
    }

    /**
     * The column <code>public.roles_permission.role_id</code>.
     */
    public final TableField<RolesPermissionRecord, Long> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.roles_permission.permission_id</code>.
     */
    public final TableField<RolesPermissionRecord, Long> PERMISSION_ID = createField(DSL.name("permission_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.roles_permission.permission_granted</code>.
     */
    public final TableField<RolesPermissionRecord, Boolean> PERMISSION_GRANTED = createField(DSL.name("permission_granted"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.roles_permission</code> table reference
     */
    public RolesPermission() {
        this(DSL.name("roles_permission"), null);
    }

    /**
     * Create an aliased <code>public.roles_permission</code> table reference
     */
    public RolesPermission(String alias) {
        this(DSL.name(alias), ROLES_PERMISSION);
    }

    /**
     * Create an aliased <code>public.roles_permission</code> table reference
     */
    public RolesPermission(Name alias) {
        this(alias, ROLES_PERMISSION);
    }

    private RolesPermission(Name alias, Table<RolesPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolesPermission(Name alias, Table<RolesPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RolesPermission(Table<O> child, ForeignKey<O, RolesPermissionRecord> key) {
        super(child, key, ROLES_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RolesPermissionRecord> getPrimaryKey() {
        return Keys.ROLE_PERMISSION_ROLE_ID_PERMISSION_ID;
    }

    @Override
    public List<UniqueKey<RolesPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<RolesPermissionRecord>>asList(Keys.ROLE_PERMISSION_ROLE_ID_PERMISSION_ID);
    }

    @Override
    public List<ForeignKey<RolesPermissionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RolesPermissionRecord, ?>>asList(Keys.ROLES_PERMISSION__ROLE_PERMISSION_ROLE_ID_FKEY, Keys.ROLES_PERMISSION__ROLE_PERMISSION_PERMISSION_ID_FKEY);
    }

    public Roles roles() {
        return new Roles(this, Keys.ROLES_PERMISSION__ROLE_PERMISSION_ROLE_ID_FKEY);
    }

    public Permission permission() {
        return new Permission(this, Keys.ROLES_PERMISSION__ROLE_PERMISSION_PERMISSION_ID_FKEY);
    }

    @Override
    public RolesPermission as(String alias) {
        return new RolesPermission(DSL.name(alias), this);
    }

    @Override
    public RolesPermission as(Name alias) {
        return new RolesPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolesPermission rename(String name) {
        return new RolesPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolesPermission rename(Name name) {
        return new RolesPermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
