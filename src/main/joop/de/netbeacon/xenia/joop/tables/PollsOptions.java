/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.PollsOptionsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PollsOptions extends TableImpl<PollsOptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.polls_options</code>
     */
    public static final PollsOptions POLLS_OPTIONS = new PollsOptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PollsOptionsRecord> getRecordType() {
        return PollsOptionsRecord.class;
    }

    /**
     * The column <code>public.polls_options.poll_id</code>.
     */
    public final TableField<PollsOptionsRecord, Long> POLL_ID = createField(DSL.name("poll_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.polls_options.poll_option_id</code>.
     */
    public final TableField<PollsOptionsRecord, Integer> POLL_OPTION_ID = createField(DSL.name("poll_option_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.polls_options.poll_option_description</code>.
     */
    public final TableField<PollsOptionsRecord, String> POLL_OPTION_DESCRIPTION = createField(DSL.name("poll_option_description"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "");

    private PollsOptions(Name alias, Table<PollsOptionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PollsOptions(Name alias, Table<PollsOptionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.polls_options</code> table reference
     */
    public PollsOptions(String alias) {
        this(DSL.name(alias), POLLS_OPTIONS);
    }

    /**
     * Create an aliased <code>public.polls_options</code> table reference
     */
    public PollsOptions(Name alias) {
        this(alias, POLLS_OPTIONS);
    }

    /**
     * Create a <code>public.polls_options</code> table reference
     */
    public PollsOptions() {
        this(DSL.name("polls_options"), null);
    }

    public <O extends Record> PollsOptions(Table<O> child, ForeignKey<O, PollsOptionsRecord> key) {
        super(child, key, POLLS_OPTIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PollsOptionsRecord> getPrimaryKey() {
        return Keys.POLLS_OPTIONS_POLL_ID_POLL_OPTION_ID;
    }

    @Override
    public List<UniqueKey<PollsOptionsRecord>> getKeys() {
        return Arrays.<UniqueKey<PollsOptionsRecord>>asList(Keys.POLLS_OPTIONS_POLL_ID_POLL_OPTION_ID);
    }

    @Override
    public List<ForeignKey<PollsOptionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PollsOptionsRecord, ?>>asList(Keys.POLLS_OPTIONS__POLLS_OPTIONS_POLL_ID_FKEY);
    }

    public Polls polls() {
        return new Polls(this, Keys.POLLS_OPTIONS__POLLS_OPTIONS_POLL_ID_FKEY);
    }

    @Override
    public PollsOptions as(String alias) {
        return new PollsOptions(DSL.name(alias), this);
    }

    @Override
    public PollsOptions as(Name alias) {
        return new PollsOptions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PollsOptions rename(String name) {
        return new PollsOptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PollsOptions rename(Name name) {
        return new PollsOptions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
