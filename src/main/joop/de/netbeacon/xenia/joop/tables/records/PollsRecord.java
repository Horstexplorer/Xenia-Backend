/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables.records;


import de.netbeacon.xenia.joop.tables.Polls;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PollsRecord extends UpdatableRecordImpl<PollsRecord> implements Record8<Long, LocalDateTime, Long, Long, Long, LocalDateTime, Boolean, String> {

    private static final long serialVersionUID = 703738477;

    /**
     * Setter for <code>public.polls.poll_id</code>.
     */
    public PollsRecord setPollId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.poll_id</code>.
     */
    public Long getPollId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.polls.creation_timestamp</code>.
     */
    public PollsRecord setCreationTimestamp(LocalDateTime value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.creation_timestamp</code>.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(1);
    }

    /**
     * Setter for <code>public.polls.guild_id</code>.
     */
    public PollsRecord setGuildId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.guild_id</code>.
     */
    public Long getGuildId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.polls.channel_id</code>.
     */
    public PollsRecord setChannelId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.channel_id</code>.
     */
    public Long getChannelId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.polls.user_id</code>.
     */
    public PollsRecord setUserId(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.polls.poll_close_timestamp</code>.
     */
    public PollsRecord setPollCloseTimestamp(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.poll_close_timestamp</code>.
     */
    public LocalDateTime getPollCloseTimestamp() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.polls.poll_is_active</code>.
     */
    public PollsRecord setPollIsActive(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.poll_is_active</code>.
     */
    public Boolean getPollIsActive() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.polls.poll_description</code>.
     */
    public PollsRecord setPollDescription(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.polls.poll_description</code>.
     */
    public String getPollDescription() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDateTime, Long, Long, Long, LocalDateTime, Boolean, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, LocalDateTime, Long, Long, Long, LocalDateTime, Boolean, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Polls.POLLS.POLL_ID;
    }

    @Override
    public Field<LocalDateTime> field2() {
        return Polls.POLLS.CREATION_TIMESTAMP;
    }

    @Override
    public Field<Long> field3() {
        return Polls.POLLS.GUILD_ID;
    }

    @Override
    public Field<Long> field4() {
        return Polls.POLLS.CHANNEL_ID;
    }

    @Override
    public Field<Long> field5() {
        return Polls.POLLS.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Polls.POLLS.POLL_CLOSE_TIMESTAMP;
    }

    @Override
    public Field<Boolean> field7() {
        return Polls.POLLS.POLL_IS_ACTIVE;
    }

    @Override
    public Field<String> field8() {
        return Polls.POLLS.POLL_DESCRIPTION;
    }

    @Override
    public Long component1() {
        return getPollId();
    }

    @Override
    public LocalDateTime component2() {
        return getCreationTimestamp();
    }

    @Override
    public Long component3() {
        return getGuildId();
    }

    @Override
    public Long component4() {
        return getChannelId();
    }

    @Override
    public Long component5() {
        return getUserId();
    }

    @Override
    public LocalDateTime component6() {
        return getPollCloseTimestamp();
    }

    @Override
    public Boolean component7() {
        return getPollIsActive();
    }

    @Override
    public String component8() {
        return getPollDescription();
    }

    @Override
    public Long value1() {
        return getPollId();
    }

    @Override
    public LocalDateTime value2() {
        return getCreationTimestamp();
    }

    @Override
    public Long value3() {
        return getGuildId();
    }

    @Override
    public Long value4() {
        return getChannelId();
    }

    @Override
    public Long value5() {
        return getUserId();
    }

    @Override
    public LocalDateTime value6() {
        return getPollCloseTimestamp();
    }

    @Override
    public Boolean value7() {
        return getPollIsActive();
    }

    @Override
    public String value8() {
        return getPollDescription();
    }

    @Override
    public PollsRecord value1(Long value) {
        setPollId(value);
        return this;
    }

    @Override
    public PollsRecord value2(LocalDateTime value) {
        setCreationTimestamp(value);
        return this;
    }

    @Override
    public PollsRecord value3(Long value) {
        setGuildId(value);
        return this;
    }

    @Override
    public PollsRecord value4(Long value) {
        setChannelId(value);
        return this;
    }

    @Override
    public PollsRecord value5(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public PollsRecord value6(LocalDateTime value) {
        setPollCloseTimestamp(value);
        return this;
    }

    @Override
    public PollsRecord value7(Boolean value) {
        setPollIsActive(value);
        return this;
    }

    @Override
    public PollsRecord value8(String value) {
        setPollDescription(value);
        return this;
    }

    @Override
    public PollsRecord values(Long value1, LocalDateTime value2, Long value3, Long value4, Long value5, LocalDateTime value6, Boolean value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PollsRecord
     */
    public PollsRecord() {
        super(Polls.POLLS);
    }

    /**
     * Create a detached, initialised PollsRecord
     */
    public PollsRecord(Long pollId, LocalDateTime creationTimestamp, Long guildId, Long channelId, Long userId, LocalDateTime pollCloseTimestamp, Boolean pollIsActive, String pollDescription) {
        super(Polls.POLLS);

        set(0, pollId);
        set(1, creationTimestamp);
        set(2, guildId);
        set(3, channelId);
        set(4, userId);
        set(5, pollCloseTimestamp);
        set(6, pollIsActive);
        set(7, pollDescription);
    }
}
