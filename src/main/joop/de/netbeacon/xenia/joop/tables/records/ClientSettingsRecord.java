/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables.records;


import de.netbeacon.xenia.joop.tables.ClientSettings;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientSettingsRecord extends UpdatableRecordImpl<ClientSettingsRecord> implements Record5<Integer, String, String, String, String> {

    private static final long serialVersionUID = -1858286442;

    /**
     * Setter for <code>public.client_settings.client_id</code>.
     */
    public ClientSettingsRecord setClientId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.client_settings.client_id</code>.
     */
    public Integer getClientId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.client_settings.client_name</code>.
     */
    public ClientSettingsRecord setClientName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.client_settings.client_name</code>.
     */
    public String getClientName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.client_settings.client_description</code>.
     */
    public ClientSettingsRecord setClientDescription(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.client_settings.client_description</code>.
     */
    public String getClientDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.client_settings.client_discord_token</code>.
     */
    public ClientSettingsRecord setClientDiscordToken(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.client_settings.client_discord_token</code>.
     */
    public String getClientDiscordToken() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.client_settings.client_type</code>.
     */
    public ClientSettingsRecord setClientType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.client_settings.client_type</code>.
     */
    public String getClientType() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ClientSettings.CLIENT_SETTINGS.CLIENT_ID;
    }

    @Override
    public Field<String> field2() {
        return ClientSettings.CLIENT_SETTINGS.CLIENT_NAME;
    }

    @Override
    public Field<String> field3() {
        return ClientSettings.CLIENT_SETTINGS.CLIENT_DESCRIPTION;
    }

    @Override
    public Field<String> field4() {
        return ClientSettings.CLIENT_SETTINGS.CLIENT_DISCORD_TOKEN;
    }

    @Override
    public Field<String> field5() {
        return ClientSettings.CLIENT_SETTINGS.CLIENT_TYPE;
    }

    @Override
    public Integer component1() {
        return getClientId();
    }

    @Override
    public String component2() {
        return getClientName();
    }

    @Override
    public String component3() {
        return getClientDescription();
    }

    @Override
    public String component4() {
        return getClientDiscordToken();
    }

    @Override
    public String component5() {
        return getClientType();
    }

    @Override
    public Integer value1() {
        return getClientId();
    }

    @Override
    public String value2() {
        return getClientName();
    }

    @Override
    public String value3() {
        return getClientDescription();
    }

    @Override
    public String value4() {
        return getClientDiscordToken();
    }

    @Override
    public String value5() {
        return getClientType();
    }

    @Override
    public ClientSettingsRecord value1(Integer value) {
        setClientId(value);
        return this;
    }

    @Override
    public ClientSettingsRecord value2(String value) {
        setClientName(value);
        return this;
    }

    @Override
    public ClientSettingsRecord value3(String value) {
        setClientDescription(value);
        return this;
    }

    @Override
    public ClientSettingsRecord value4(String value) {
        setClientDiscordToken(value);
        return this;
    }

    @Override
    public ClientSettingsRecord value5(String value) {
        setClientType(value);
        return this;
    }

    @Override
    public ClientSettingsRecord values(Integer value1, String value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClientSettingsRecord
     */
    public ClientSettingsRecord() {
        super(ClientSettings.CLIENT_SETTINGS);
    }

    /**
     * Create a detached, initialised ClientSettingsRecord
     */
    public ClientSettingsRecord(Integer clientId, String clientName, String clientDescription, String clientDiscordToken, String clientType) {
        super(ClientSettings.CLIENT_SETTINGS);

        set(0, clientId);
        set(1, clientName);
        set(2, clientDescription);
        set(3, clientDiscordToken);
        set(4, clientType);
    }
}
