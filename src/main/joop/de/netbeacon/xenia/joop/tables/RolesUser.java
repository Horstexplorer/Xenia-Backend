/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.RolesUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolesUser extends TableImpl<RolesUserRecord> {

    private static final long serialVersionUID = -721881410;

    /**
     * The reference instance of <code>public.roles_user</code>
     */
    public static final RolesUser ROLES_USER = new RolesUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolesUserRecord> getRecordType() {
        return RolesUserRecord.class;
    }

    /**
     * The column <code>public.roles_user.role_id</code>.
     */
    public final TableField<RolesUserRecord, Long> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.roles_user.user_id</code>.
     */
    public final TableField<RolesUserRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.roles_user</code> table reference
     */
    public RolesUser() {
        this(DSL.name("roles_user"), null);
    }

    /**
     * Create an aliased <code>public.roles_user</code> table reference
     */
    public RolesUser(String alias) {
        this(DSL.name(alias), ROLES_USER);
    }

    /**
     * Create an aliased <code>public.roles_user</code> table reference
     */
    public RolesUser(Name alias) {
        this(alias, ROLES_USER);
    }

    private RolesUser(Name alias, Table<RolesUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolesUser(Name alias, Table<RolesUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RolesUser(Table<O> child, ForeignKey<O, RolesUserRecord> key) {
        super(child, key, ROLES_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<RolesUserRecord> getPrimaryKey() {
        return Keys.ROLES_USER_ROLE_ID_USER_ID;
    }

    @Override
    public List<UniqueKey<RolesUserRecord>> getKeys() {
        return Arrays.<UniqueKey<RolesUserRecord>>asList(Keys.ROLES_USER_ROLE_ID_USER_ID);
    }

    @Override
    public List<ForeignKey<RolesUserRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RolesUserRecord, ?>>asList(Keys.ROLES_USER__ROLES_USER_ROLE_ID_FKEY, Keys.ROLES_USER__ROLES_USER_USER_ID_FKEY);
    }

    public Roles roles() {
        return new Roles(this, Keys.ROLES_USER__ROLES_USER_ROLE_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.ROLES_USER__ROLES_USER_USER_ID_FKEY);
    }

    @Override
    public RolesUser as(String alias) {
        return new RolesUser(DSL.name(alias), this);
    }

    @Override
    public RolesUser as(Name alias) {
        return new RolesUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolesUser rename(String name) {
        return new RolesUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolesUser rename(Name name) {
        return new RolesUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
