/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables.records;


import de.netbeacon.xenia.joop.tables.Messages;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessagesRecord extends UpdatableRecordImpl<MessagesRecord> implements Record8<Long, Long, Long, Long, LocalDateTime, LocalDateTime, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.messages.message_id</code>.
     */
    public MessagesRecord setMessageId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.message_id</code>.
     */
    public Long getMessageId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.messages.guild_id</code>.
     */
    public MessagesRecord setGuildId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.guild_id</code>.
     */
    public Long getGuildId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.messages.channel_id</code>.
     */
    public MessagesRecord setChannelId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.channel_id</code>.
     */
    public Long getChannelId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.messages.user_id</code>.
     */
    public MessagesRecord setUserId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.messages.creation_timestamp</code>.
     */
    public MessagesRecord setCreationTimestamp(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.creation_timestamp</code>.
     */
    public LocalDateTime getCreationTimestamp() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.messages.creation_timestamp_discord</code>.
     */
    public MessagesRecord setCreationTimestampDiscord(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.creation_timestamp_discord</code>.
     */
    public LocalDateTime getCreationTimestampDiscord() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.messages.message_salt</code>.
     */
    public MessagesRecord setMessageSalt(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.message_salt</code>.
     */
    public String getMessageSalt() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.messages.message_content</code>.
     */
    public MessagesRecord setMessageContent(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.messages.message_content</code>.
     */
    public String getMessageContent() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, Long, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Long, Long, LocalDateTime, LocalDateTime, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Messages.MESSAGES.MESSAGE_ID;
    }

    @Override
    public Field<Long> field2() {
        return Messages.MESSAGES.GUILD_ID;
    }

    @Override
    public Field<Long> field3() {
        return Messages.MESSAGES.CHANNEL_ID;
    }

    @Override
    public Field<Long> field4() {
        return Messages.MESSAGES.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Messages.MESSAGES.CREATION_TIMESTAMP;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Messages.MESSAGES.CREATION_TIMESTAMP_DISCORD;
    }

    @Override
    public Field<String> field7() {
        return Messages.MESSAGES.MESSAGE_SALT;
    }

    @Override
    public Field<String> field8() {
        return Messages.MESSAGES.MESSAGE_CONTENT;
    }

    @Override
    public Long component1() {
        return getMessageId();
    }

    @Override
    public Long component2() {
        return getGuildId();
    }

    @Override
    public Long component3() {
        return getChannelId();
    }

    @Override
    public Long component4() {
        return getUserId();
    }

    @Override
    public LocalDateTime component5() {
        return getCreationTimestamp();
    }

    @Override
    public LocalDateTime component6() {
        return getCreationTimestampDiscord();
    }

    @Override
    public String component7() {
        return getMessageSalt();
    }

    @Override
    public String component8() {
        return getMessageContent();
    }

    @Override
    public Long value1() {
        return getMessageId();
    }

    @Override
    public Long value2() {
        return getGuildId();
    }

    @Override
    public Long value3() {
        return getChannelId();
    }

    @Override
    public Long value4() {
        return getUserId();
    }

    @Override
    public LocalDateTime value5() {
        return getCreationTimestamp();
    }

    @Override
    public LocalDateTime value6() {
        return getCreationTimestampDiscord();
    }

    @Override
    public String value7() {
        return getMessageSalt();
    }

    @Override
    public String value8() {
        return getMessageContent();
    }

    @Override
    public MessagesRecord value1(Long value) {
        setMessageId(value);
        return this;
    }

    @Override
    public MessagesRecord value2(Long value) {
        setGuildId(value);
        return this;
    }

    @Override
    public MessagesRecord value3(Long value) {
        setChannelId(value);
        return this;
    }

    @Override
    public MessagesRecord value4(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public MessagesRecord value5(LocalDateTime value) {
        setCreationTimestamp(value);
        return this;
    }

    @Override
    public MessagesRecord value6(LocalDateTime value) {
        setCreationTimestampDiscord(value);
        return this;
    }

    @Override
    public MessagesRecord value7(String value) {
        setMessageSalt(value);
        return this;
    }

    @Override
    public MessagesRecord value8(String value) {
        setMessageContent(value);
        return this;
    }

    @Override
    public MessagesRecord values(Long value1, Long value2, Long value3, Long value4, LocalDateTime value5, LocalDateTime value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MessagesRecord
     */
    public MessagesRecord() {
        super(Messages.MESSAGES);
    }

    /**
     * Create a detached, initialised MessagesRecord
     */
    public MessagesRecord(Long messageId, Long guildId, Long channelId, Long userId, LocalDateTime creationTimestamp, LocalDateTime creationTimestampDiscord, String messageSalt, String messageContent) {
        super(Messages.MESSAGES);

        setMessageId(messageId);
        setGuildId(guildId);
        setChannelId(channelId);
        setUserId(userId);
        setCreationTimestamp(creationTimestamp);
        setCreationTimestampDiscord(creationTimestampDiscord);
        setMessageSalt(messageSalt);
        setMessageContent(messageContent);
    }
}
