/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.joop.tables;


import de.netbeacon.xenia.joop.Keys;
import de.netbeacon.xenia.joop.Public;
import de.netbeacon.xenia.joop.tables.records.UsersAuthRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersAuth extends TableImpl<UsersAuthRecord> {

    private static final long serialVersionUID = -1664784841;

    /**
     * The reference instance of <code>public.users_auth</code>
     */
    public static final UsersAuth USERS_AUTH = new UsersAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersAuthRecord> getRecordType() {
        return UsersAuthRecord.class;
    }

    /**
     * The column <code>public.users_auth.user_id</code>.
     */
    public final TableField<UsersAuthRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.users_auth.creation_timestamp</code>.
     */
    public final TableField<UsersAuthRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.users_auth.valid_until_timestamp</code>.
     */
    public final TableField<UsersAuthRecord, LocalDateTime> VALID_UNTIL_TIMESTAMP = createField(DSL.name("valid_until_timestamp"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>public.users_auth.api_auth_hash</code>.
     */
    public final TableField<UsersAuthRecord, String> API_AUTH_HASH = createField(DSL.name("api_auth_hash"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.users_auth</code> table reference
     */
    public UsersAuth() {
        this(DSL.name("users_auth"), null);
    }

    /**
     * Create an aliased <code>public.users_auth</code> table reference
     */
    public UsersAuth(String alias) {
        this(DSL.name(alias), USERS_AUTH);
    }

    /**
     * Create an aliased <code>public.users_auth</code> table reference
     */
    public UsersAuth(Name alias) {
        this(alias, USERS_AUTH);
    }

    private UsersAuth(Name alias, Table<UsersAuthRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersAuth(Name alias, Table<UsersAuthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UsersAuth(Table<O> child, ForeignKey<O, UsersAuthRecord> key) {
        super(child, key, USERS_AUTH);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersAuthRecord> getPrimaryKey() {
        return Keys.USERS_AUTH_USER_ID;
    }

    @Override
    public List<UniqueKey<UsersAuthRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersAuthRecord>>asList(Keys.USERS_AUTH_USER_ID);
    }

    @Override
    public List<ForeignKey<UsersAuthRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersAuthRecord, ?>>asList(Keys.USERS_AUTH__USERS_AUTH_USER_ID_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.USERS_AUTH__USERS_AUTH_USER_ID_FKEY);
    }

    @Override
    public UsersAuth as(String alias) {
        return new UsersAuth(DSL.name(alias), this);
    }

    @Override
    public UsersAuth as(Name alias) {
        return new UsersAuth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersAuth rename(String name) {
        return new UsersAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersAuth rename(Name name) {
        return new UsersAuth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
