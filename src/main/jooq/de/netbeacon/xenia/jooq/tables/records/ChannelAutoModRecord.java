/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables.records;


import de.netbeacon.xenia.jooq.tables.ChannelAutoMod;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChannelAutoModRecord extends UpdatableRecordImpl<ChannelAutoModRecord> implements Record7<Long, Integer, Integer, Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.channel_auto_mod.channel_id</code>.
     */
    public ChannelAutoModRecord setChannelId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.channel_id</code>.
     */
    public Long getChannelId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.channel_auto_mod.filter_word_blacklist</code>.
     */
    public ChannelAutoModRecord setFilterWordBlacklist(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.filter_word_blacklist</code>.
     */
    public Integer getFilterWordBlacklist() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.channel_auto_mod.filter_invite_url</code>.
     */
    public ChannelAutoModRecord setFilterInviteUrl(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.filter_invite_url</code>.
     */
    public Integer getFilterInviteUrl() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.channel_auto_mod.filter_other_url</code>.
     */
    public ChannelAutoModRecord setFilterOtherUrl(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.filter_other_url</code>.
     */
    public Integer getFilterOtherUrl() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.channel_auto_mod.filter_special_chars</code>.
     */
    public ChannelAutoModRecord setFilterSpecialChars(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.filter_special_chars</code>.
     */
    public Integer getFilterSpecialChars() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.channel_auto_mod.filter_multiline_spam</code>.
     */
    public ChannelAutoModRecord setFilterMultilineSpam(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.filter_multiline_spam</code>.
     */
    public Integer getFilterMultilineSpam() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.channel_auto_mod.filter_chat_flood</code>.
     */
    public ChannelAutoModRecord setFilterChatFlood(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.channel_auto_mod.filter_chat_flood</code>.
     */
    public Integer getFilterChatFlood() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, Integer, Integer, Integer, Integer, Integer, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.CHANNEL_ID;
    }

    @Override
    public Field<Integer> field2() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.FILTER_WORD_BLACKLIST;
    }

    @Override
    public Field<Integer> field3() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.FILTER_INVITE_URL;
    }

    @Override
    public Field<Integer> field4() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.FILTER_OTHER_URL;
    }

    @Override
    public Field<Integer> field5() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.FILTER_SPECIAL_CHARS;
    }

    @Override
    public Field<Integer> field6() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.FILTER_MULTILINE_SPAM;
    }

    @Override
    public Field<Integer> field7() {
        return ChannelAutoMod.CHANNEL_AUTO_MOD.FILTER_CHAT_FLOOD;
    }

    @Override
    public Long component1() {
        return getChannelId();
    }

    @Override
    public Integer component2() {
        return getFilterWordBlacklist();
    }

    @Override
    public Integer component3() {
        return getFilterInviteUrl();
    }

    @Override
    public Integer component4() {
        return getFilterOtherUrl();
    }

    @Override
    public Integer component5() {
        return getFilterSpecialChars();
    }

    @Override
    public Integer component6() {
        return getFilterMultilineSpam();
    }

    @Override
    public Integer component7() {
        return getFilterChatFlood();
    }

    @Override
    public Long value1() {
        return getChannelId();
    }

    @Override
    public Integer value2() {
        return getFilterWordBlacklist();
    }

    @Override
    public Integer value3() {
        return getFilterInviteUrl();
    }

    @Override
    public Integer value4() {
        return getFilterOtherUrl();
    }

    @Override
    public Integer value5() {
        return getFilterSpecialChars();
    }

    @Override
    public Integer value6() {
        return getFilterMultilineSpam();
    }

    @Override
    public Integer value7() {
        return getFilterChatFlood();
    }

    @Override
    public ChannelAutoModRecord value1(Long value) {
        setChannelId(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord value2(Integer value) {
        setFilterWordBlacklist(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord value3(Integer value) {
        setFilterInviteUrl(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord value4(Integer value) {
        setFilterOtherUrl(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord value5(Integer value) {
        setFilterSpecialChars(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord value6(Integer value) {
        setFilterMultilineSpam(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord value7(Integer value) {
        setFilterChatFlood(value);
        return this;
    }

    @Override
    public ChannelAutoModRecord values(Long value1, Integer value2, Integer value3, Integer value4, Integer value5, Integer value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChannelAutoModRecord
     */
    public ChannelAutoModRecord() {
        super(ChannelAutoMod.CHANNEL_AUTO_MOD);
    }

    /**
     * Create a detached, initialised ChannelAutoModRecord
     */
    public ChannelAutoModRecord(Long channelId, Integer filterWordBlacklist, Integer filterInviteUrl, Integer filterOtherUrl, Integer filterSpecialChars, Integer filterMultilineSpam, Integer filterChatFlood) {
        super(ChannelAutoMod.CHANNEL_AUTO_MOD);

        setChannelId(channelId);
        setFilterWordBlacklist(filterWordBlacklist);
        setFilterInviteUrl(filterInviteUrl);
        setFilterOtherUrl(filterOtherUrl);
        setFilterSpecialChars(filterSpecialChars);
        setFilterMultilineSpam(filterMultilineSpam);
        setFilterChatFlood(filterChatFlood);
    }
}
