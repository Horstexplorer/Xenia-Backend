/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Keys;
import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.ChannelsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Channels extends TableImpl<ChannelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.channels</code>
     */
    public static final Channels CHANNELS = new Channels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelsRecord> getRecordType() {
        return ChannelsRecord.class;
    }

    /**
     * The column <code>public.channels.channel_id</code>.
     */
    public final TableField<ChannelsRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.channels.guild_id</code>.
     */
    public final TableField<ChannelsRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.channels.creation_timestamp</code>.
     */
    public final TableField<ChannelsRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.channels.tmp_logging_active</code>.
     */
    public final TableField<ChannelsRecord, Boolean> TMP_LOGGING_ACTIVE = createField(DSL.name("tmp_logging_active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.channels.tmp_logging_channel_id</code>.
     */
    public final TableField<ChannelsRecord, Long> TMP_LOGGING_CHANNEL_ID = createField(DSL.name("tmp_logging_channel_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'::bigint", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.channels.meta_channelname</code>.
     */
    public final TableField<ChannelsRecord, String> META_CHANNELNAME = createField(DSL.name("meta_channelname"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'Unknown channel'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>public.channels.meta_channeltopic</code>.
     */
    public final TableField<ChannelsRecord, String> META_CHANNELTOPIC = createField(DSL.name("meta_channeltopic"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field("'Unknown topic'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.channels.access_mode</code>.
     */
    public final TableField<ChannelsRecord, Integer> ACCESS_MODE = createField(DSL.name("access_mode"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.channels.channel_flags</code>.
     */
    public final TableField<ChannelsRecord, Integer> CHANNEL_FLAGS = createField(DSL.name("channel_flags"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.channels.channel_settings</code>.
     */
    public final TableField<ChannelsRecord, Integer> CHANNEL_SETTINGS = createField(DSL.name("channel_settings"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.channels.d43z1_settings</code>.
     */
    public final TableField<ChannelsRecord, Integer> D43Z1_SETTINGS = createField(DSL.name("d43z1_settings"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private Channels(Name alias, Table<ChannelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Channels(Name alias, Table<ChannelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.channels</code> table reference
     */
    public Channels(String alias) {
        this(DSL.name(alias), CHANNELS);
    }

    /**
     * Create an aliased <code>public.channels</code> table reference
     */
    public Channels(Name alias) {
        this(alias, CHANNELS);
    }

    /**
     * Create a <code>public.channels</code> table reference
     */
    public Channels() {
        this(DSL.name("channels"), null);
    }

    public <O extends Record> Channels(Table<O> child, ForeignKey<O, ChannelsRecord> key) {
        super(child, key, CHANNELS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ChannelsRecord> getPrimaryKey() {
        return Keys.CHANNELS_CHANNEL_ID;
    }

    @Override
    public List<ForeignKey<ChannelsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHANNELS__CHANNELS_GUILD_ID_FKEY);
    }

    private transient Guilds _guilds;

    public Guilds guilds() {
        if (_guilds == null)
            _guilds = new Guilds(this, Keys.CHANNELS__CHANNELS_GUILD_ID_FKEY);

        return _guilds;
    }

    @Override
    public Channels as(String alias) {
        return new Channels(DSL.name(alias), this);
    }

    @Override
    public Channels as(Name alias) {
        return new Channels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Channels rename(String name) {
        return new Channels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channels rename(Name name) {
        return new Channels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, Long, LocalDateTime, Boolean, Long, String, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
