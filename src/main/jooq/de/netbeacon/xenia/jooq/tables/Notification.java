/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Keys;
import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.NotificationRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notification extends TableImpl<NotificationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.notification</code>
     */
    public static final Notification NOTIFICATION = new Notification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationRecord> getRecordType() {
        return NotificationRecord.class;
    }

    /**
     * The column <code>public.notification.notification_id</code>.
     */
    public final TableField<NotificationRecord, Long> NOTIFICATION_ID = createField(DSL.name("notification_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.notification.creation_timestamp</code>.
     */
    public final TableField<NotificationRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.notification.guild_id</code>.
     */
    public final TableField<NotificationRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.notification.channel_id</code>.
     */
    public final TableField<NotificationRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.notification.user_id</code>.
     */
    public final TableField<NotificationRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.notification.notification_target</code>.
     */
    public final TableField<NotificationRecord, LocalDateTime> NOTIFICATION_TARGET = createField(DSL.name("notification_target"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.notification.notification_message</code>.
     */
    public final TableField<NotificationRecord, String> NOTIFICATION_MESSAGE = createField(DSL.name("notification_message"), SQLDataType.CLOB.nullable(false), this, "");

    private Notification(Name alias, Table<NotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notification(Name alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.notification</code> table reference
     */
    public Notification(String alias) {
        this(DSL.name(alias), NOTIFICATION);
    }

    /**
     * Create an aliased <code>public.notification</code> table reference
     */
    public Notification(Name alias) {
        this(alias, NOTIFICATION);
    }

    /**
     * Create a <code>public.notification</code> table reference
     */
    public Notification() {
        this(DSL.name("notification"), null);
    }

    public <O extends Record> Notification(Table<O> child, ForeignKey<O, NotificationRecord> key) {
        super(child, key, NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<NotificationRecord, Long> getIdentity() {
        return (Identity<NotificationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<NotificationRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_NOTIFICATION_ID;
    }

    @Override
    public List<UniqueKey<NotificationRecord>> getKeys() {
        return Arrays.<UniqueKey<NotificationRecord>>asList(Keys.NOTIFICATION_NOTIFICATION_ID);
    }

    @Override
    public List<ForeignKey<NotificationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationRecord, ?>>asList(Keys.NOTIFICATION__NOTIFICATION_GUILD_ID_FKEY, Keys.NOTIFICATION__NOTIFICATION_GUILD_ID_USER_ID_FKEY, Keys.NOTIFICATION__NOTIFICATION_CHANNEL_ID_FKEY);
    }

    public Guilds guilds() {
        return new Guilds(this, Keys.NOTIFICATION__NOTIFICATION_GUILD_ID_FKEY);
    }

    public Members members() {
        return new Members(this, Keys.NOTIFICATION__NOTIFICATION_GUILD_ID_USER_ID_FKEY);
    }

    public Channels channels() {
        return new Channels(this, Keys.NOTIFICATION__NOTIFICATION_CHANNEL_ID_FKEY);
    }

    @Override
    public Notification as(String alias) {
        return new Notification(DSL.name(alias), this);
    }

    @Override
    public Notification as(Name alias) {
        return new Notification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(String name) {
        return new Notification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notification rename(Name name) {
        return new Notification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, Long, Long, Long, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
