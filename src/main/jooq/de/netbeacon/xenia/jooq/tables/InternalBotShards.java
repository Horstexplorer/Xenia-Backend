/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Keys;
import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.InternalBotShardsRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InternalBotShards extends TableImpl<InternalBotShardsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.internal_bot_shards</code>
     */
    public static final InternalBotShards INTERNAL_BOT_SHARDS = new InternalBotShards();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InternalBotShardsRecord> getRecordType() {
        return InternalBotShardsRecord.class;
    }

    /**
     * The column <code>public.internal_bot_shards.shard_id</code>.
     */
    public final TableField<InternalBotShardsRecord, Integer> SHARD_ID = createField(DSL.name("shard_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.internal_bot_shards.client_id</code>.
     */
    public final TableField<InternalBotShardsRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private InternalBotShards(Name alias, Table<InternalBotShardsRecord> aliased) {
        this(alias, aliased, null);
    }

    private InternalBotShards(Name alias, Table<InternalBotShardsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.internal_bot_shards</code> table reference
     */
    public InternalBotShards(String alias) {
        this(DSL.name(alias), INTERNAL_BOT_SHARDS);
    }

    /**
     * Create an aliased <code>public.internal_bot_shards</code> table reference
     */
    public InternalBotShards(Name alias) {
        this(alias, INTERNAL_BOT_SHARDS);
    }

    /**
     * Create a <code>public.internal_bot_shards</code> table reference
     */
    public InternalBotShards() {
        this(DSL.name("internal_bot_shards"), null);
    }

    public <O extends Record> InternalBotShards(Table<O> child, ForeignKey<O, InternalBotShardsRecord> key) {
        super(child, key, INTERNAL_BOT_SHARDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<InternalBotShardsRecord> getPrimaryKey() {
        return Keys.INTERNAL_BOT_SHARDS_SHARD_ID;
    }

    @Override
    public List<ForeignKey<InternalBotShardsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INTERNAL_BOT_SHARDS__INTERNAL_BOT_SHARDS_CLIENT_ID_FKEY);
    }

    private transient InternalBotData _internalBotData;

    public InternalBotData internalBotData() {
        if (_internalBotData == null)
            _internalBotData = new InternalBotData(this, Keys.INTERNAL_BOT_SHARDS__INTERNAL_BOT_SHARDS_CLIENT_ID_FKEY);

        return _internalBotData;
    }

    @Override
    public InternalBotShards as(String alias) {
        return new InternalBotShards(DSL.name(alias), this);
    }

    @Override
    public InternalBotShards as(Name alias) {
        return new InternalBotShards(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalBotShards rename(String name) {
        return new InternalBotShards(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalBotShards rename(Name name) {
        return new InternalBotShards(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
