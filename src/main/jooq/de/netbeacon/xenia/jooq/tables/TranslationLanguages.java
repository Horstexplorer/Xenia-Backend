/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Keys;
import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.TranslationLanguagesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TranslationLanguages extends TableImpl<TranslationLanguagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.translation_languages</code>
     */
    public static final TranslationLanguages TRANSLATION_LANGUAGES = new TranslationLanguages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TranslationLanguagesRecord> getRecordType() {
        return TranslationLanguagesRecord.class;
    }

    /**
     * The column <code>public.translation_languages.language_id</code>.
     */
    public final TableField<TranslationLanguagesRecord, String> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.translation_languages.language_name</code>.
     */
    public final TableField<TranslationLanguagesRecord, String> LANGUAGE_NAME = createField(DSL.name("language_name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    private TranslationLanguages(Name alias, Table<TranslationLanguagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TranslationLanguages(Name alias, Table<TranslationLanguagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.translation_languages</code> table reference
     */
    public TranslationLanguages(String alias) {
        this(DSL.name(alias), TRANSLATION_LANGUAGES);
    }

    /**
     * Create an aliased <code>public.translation_languages</code> table reference
     */
    public TranslationLanguages(Name alias) {
        this(alias, TRANSLATION_LANGUAGES);
    }

    /**
     * Create a <code>public.translation_languages</code> table reference
     */
    public TranslationLanguages() {
        this(DSL.name("translation_languages"), null);
    }

    public <O extends Record> TranslationLanguages(Table<O> child, ForeignKey<O, TranslationLanguagesRecord> key) {
        super(child, key, TRANSLATION_LANGUAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TranslationLanguagesRecord> getPrimaryKey() {
        return Keys.TRANSLATION_LANGUAGES_LANGUAGE_ID;
    }

    @Override
    public List<UniqueKey<TranslationLanguagesRecord>> getKeys() {
        return Arrays.<UniqueKey<TranslationLanguagesRecord>>asList(Keys.TRANSLATION_LANGUAGES_LANGUAGE_ID);
    }

    @Override
    public TranslationLanguages as(String alias) {
        return new TranslationLanguages(DSL.name(alias), this);
    }

    @Override
    public TranslationLanguages as(Name alias) {
        return new TranslationLanguages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslationLanguages rename(String name) {
        return new TranslationLanguages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslationLanguages rename(Name name) {
        return new TranslationLanguages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
