/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Keys;
import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.TwitchnotificationsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Twitchnotifications extends TableImpl<TwitchnotificationsRecord>{

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>public.twitchnotifications</code>
	 */
	public static final Twitchnotifications TWITCHNOTIFICATIONS = new Twitchnotifications();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TwitchnotificationsRecord> getRecordType(){
		return TwitchnotificationsRecord.class;
	}

	/**
	 * The column <code>public.twitchnotifications.twitchnotification_id</code>.
	 */
	public final TableField<TwitchnotificationsRecord, Long> TWITCHNOTIFICATION_ID = createField(DSL.name("twitchnotification_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>public.twitchnotifications.creation_timestamp</code>.
	 */
	public final TableField<TwitchnotificationsRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

	/**
	 * The column <code>public.twitchnotifications.guild_id</code>.
	 */
	public final TableField<TwitchnotificationsRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>public.twitchnotifications.channel_id</code>.
	 */
	public final TableField<TwitchnotificationsRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>public.twitchnotifications.twitchnotification_twitch_channel_name</code>.
	 */
	public final TableField<TwitchnotificationsRecord, String> TWITCHNOTIFICATION_TWITCH_CHANNEL_NAME = createField(DSL.name("twitchnotification_twitch_channel_name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

	/**
	 * The column <code>public.twitchnotifications.twitchnotification_twitch_channel_id</code>.
	 */
	public final TableField<TwitchnotificationsRecord, Long> TWITCHNOTIFICATION_TWITCH_CHANNEL_ID = createField(DSL.name("twitchnotification_twitch_channel_id"), SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>public.twitchnotifications.twitchnotification_custom_message</code>.
	 */
	public final TableField<TwitchnotificationsRecord, String> TWITCHNOTIFICATION_CUSTOM_MESSAGE = createField(DSL.name("twitchnotification_custom_message"), SQLDataType.VARCHAR(512).nullable(false).defaultValue(DSL.field("'$username$ is now live on twitch playing $game$'::character varying", SQLDataType.VARCHAR)), this, "");

	private Twitchnotifications(Name alias, Table<TwitchnotificationsRecord> aliased){
		this(alias, aliased, null);
	}

	private Twitchnotifications(Name alias, Table<TwitchnotificationsRecord> aliased, Field<?>[] parameters){
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>public.twitchnotifications</code> table reference
	 */
	public Twitchnotifications(String alias){
		this(DSL.name(alias), TWITCHNOTIFICATIONS);
	}

	/**
	 * Create an aliased <code>public.twitchnotifications</code> table reference
	 */
	public Twitchnotifications(Name alias){
		this(alias, TWITCHNOTIFICATIONS);
	}

	/**
	 * Create a <code>public.twitchnotifications</code> table reference
	 */
	public Twitchnotifications(){
		this(DSL.name("twitchnotifications"), null);
	}

	public <O extends Record> Twitchnotifications(Table<O> child, ForeignKey<O, TwitchnotificationsRecord> key){
		super(child, key, TWITCHNOTIFICATIONS);
	}

	@Override
	public Schema getSchema(){
		return Public.PUBLIC;
	}

	@Override
	public Identity<TwitchnotificationsRecord, Long> getIdentity(){
		return (Identity<TwitchnotificationsRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<TwitchnotificationsRecord> getPrimaryKey(){
		return Keys.TWITCHNOTIFICATIONS_TWITCHNOTIFICATION_ID;
	}

	@Override
	public List<UniqueKey<TwitchnotificationsRecord>> getKeys(){
		return Arrays.<UniqueKey<TwitchnotificationsRecord>>asList(Keys.TWITCHNOTIFICATIONS_TWITCHNOTIFICATION_ID);
	}

	@Override
	public List<ForeignKey<TwitchnotificationsRecord, ?>> getReferences(){
		return Arrays.<ForeignKey<TwitchnotificationsRecord, ?>>asList(Keys.TWITCHNOTIFICATIONS__TWITCHNOTIFICATIONS_GUILD_ID_FKEY, Keys.TWITCHNOTIFICATIONS__TWITCHNOTIFICATIONS_CHANNEL_ID_FKEY);
	}

	public Guilds guilds(){
		return new Guilds(this, Keys.TWITCHNOTIFICATIONS__TWITCHNOTIFICATIONS_GUILD_ID_FKEY);
	}

	public Channels channels(){
		return new Channels(this, Keys.TWITCHNOTIFICATIONS__TWITCHNOTIFICATIONS_CHANNEL_ID_FKEY);
	}

	@Override
	public Twitchnotifications as(String alias){
		return new Twitchnotifications(DSL.name(alias), this);
	}

	@Override
	public Twitchnotifications as(Name alias){
		return new Twitchnotifications(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Twitchnotifications rename(String name){
		return new Twitchnotifications(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Twitchnotifications rename(Name name){
		return new Twitchnotifications(name, null);
	}

	// -------------------------------------------------------------------------
	// Row7 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row7<Long, LocalDateTime, Long, Long, String, Long, String> fieldsRow(){
		return (Row7) super.fieldsRow();
	}

}
