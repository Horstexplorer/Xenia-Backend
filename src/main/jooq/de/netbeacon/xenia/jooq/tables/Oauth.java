/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Keys;
import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.OauthRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Oauth extends TableImpl<OauthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.oauth</code>
     */
    public static final Oauth OAUTH = new Oauth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthRecord> getRecordType() {
        return OauthRecord.class;
    }

    /**
     * The column <code>public.oauth.user_id</code>.
     */
    public final TableField<OauthRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.oauth.local_auth_secret</code>.
     */
    public final TableField<OauthRecord, String> LOCAL_AUTH_SECRET = createField(DSL.name("local_auth_secret"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.oauth.discord_access_token</code>.
     */
    public final TableField<OauthRecord, String> DISCORD_ACCESS_TOKEN = createField(DSL.name("discord_access_token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.oauth.discord_refresh_token</code>.
     */
    public final TableField<OauthRecord, String> DISCORD_REFRESH_TOKEN = createField(DSL.name("discord_refresh_token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.oauth.discord_invalidation_time</code>.
     */
    public final TableField<OauthRecord, LocalDateTime> DISCORD_INVALIDATION_TIME = createField(DSL.name("discord_invalidation_time"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.oauth.discord_scopes</code>.
     */
    public final TableField<OauthRecord, String> DISCORD_SCOPES = createField(DSL.name("discord_scopes"), SQLDataType.CLOB.nullable(false), this, "");

    private Oauth(Name alias, Table<OauthRecord> aliased) {
        this(alias, aliased, null);
    }

    private Oauth(Name alias, Table<OauthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.oauth</code> table reference
     */
    public Oauth(String alias) {
        this(DSL.name(alias), OAUTH);
    }

    /**
     * Create an aliased <code>public.oauth</code> table reference
     */
    public Oauth(Name alias) {
        this(alias, OAUTH);
    }

    /**
     * Create a <code>public.oauth</code> table reference
     */
    public Oauth() {
        this(DSL.name("oauth"), null);
    }

    public <O extends Record> Oauth(Table<O> child, ForeignKey<O, OauthRecord> key) {
        super(child, key, OAUTH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OauthRecord> getPrimaryKey() {
        return Keys.OAUTH_USER_ID;
    }

    @Override
    public List<ForeignKey<OauthRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAUTH__OAUTH_USER_ID_FKEY);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.OAUTH__OAUTH_USER_ID_FKEY);

        return _users;
    }

    @Override
    public Oauth as(String alias) {
        return new Oauth(DSL.name(alias), this);
    }

    @Override
    public Oauth as(Name alias) {
        return new Oauth(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth rename(String name) {
        return new Oauth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Oauth rename(Name name) {
        return new Oauth(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, LocalDateTime, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
