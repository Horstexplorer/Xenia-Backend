/*
 * This file is generated by jOOQ.
 */
package de.netbeacon.xenia.jooq.tables;


import de.netbeacon.xenia.jooq.Public;
import de.netbeacon.xenia.jooq.tables.records.TranslationsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Translations extends TableImpl<TranslationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.translations</code>
     */
    public static final Translations TRANSLATIONS = new Translations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TranslationsRecord> getRecordType() {
        return TranslationsRecord.class;
    }

    /**
     * The column <code>public.translations.translation_id</code>.
     */
    public final TableField<TranslationsRecord, Long> TRANSLATION_ID = createField(DSL.name("translation_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.translations.translation_identifier</code>.
     */
    public final TableField<TranslationsRecord, String> TRANSLATION_IDENTIFIER = createField(DSL.name("translation_identifier"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.translations.translation_language</code>.
     */
    public final TableField<TranslationsRecord, String> TRANSLATION_LANGUAGE = createField(DSL.name("translation_language"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.translations.translation</code>.
     */
    public final TableField<TranslationsRecord, String> TRANSLATION = createField(DSL.name("translation"), SQLDataType.CLOB.nullable(false), this, "");

    private Translations(Name alias, Table<TranslationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Translations(Name alias, Table<TranslationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.translations</code> table reference
     */
    public Translations(String alias) {
        this(DSL.name(alias), TRANSLATIONS);
    }

    /**
     * Create an aliased <code>public.translations</code> table reference
     */
    public Translations(Name alias) {
        this(alias, TRANSLATIONS);
    }

    /**
     * Create a <code>public.translations</code> table reference
     */
    public Translations() {
        this(DSL.name("translations"), null);
    }

    public <O extends Record> Translations(Table<O> child, ForeignKey<O, TranslationsRecord> key) {
        super(child, key, TRANSLATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Translations as(String alias) {
        return new Translations(DSL.name(alias), this);
    }

    @Override
    public Translations as(Name alias) {
        return new Translations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Translations rename(String name) {
        return new Translations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Translations rename(Name name) {
        return new Translations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
